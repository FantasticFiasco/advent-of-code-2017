package day1_test

import (
	"testing"

	"github.com/FantasticFiasco/advent-of-code-2017/day1"
	"github.com/stretchr/testify/assert"
)

func TestSolvePart1GivenExamples(t *testing.T) {
	samples := []struct {
		input    string
		expected int
	}{
		{"1122", 3},
		{"1111", 4},
		{"1234", 0},
		{"91212129", 9},
	}

	for _, sample := range samples {
		input := toNumberArray(sample.input)

		output := day1.SolvePart1(input)

		assert.Equal(t, sample.expected, output)
	}
}

func TestSolvePart1(t *testing.T) {
	input := toNumberArray(input)

	output := day1.SolvePart1(input)

	assert.Equal(t, 1069, output)
}

func TestSolvePart2GivenExamples(t *testing.T) {
	samples := []struct {
		input    string
		expected int
	}{
		{"1212", 6},
		{"1221", 0},
		{"123425", 4},
		{"123123", 12},
		{"12131415", 4},
	}

	for _, sample := range samples {
		input := toNumberArray(sample.input)

		output := day1.SolvePart2(input)

		assert.Equal(t, sample.expected, output)
	}
}

func TestSolvePart2(t *testing.T) {
	input := toNumberArray(input)

	output := day1.SolvePart2(input)

	assert.Equal(t, 1268, output)
}

func toNumberArray(sequence string) []int {
	sequenceLength := len(sequence)
	numbers := make([]int, sequenceLength)

	for i := 0; i < sequenceLength; i++ {
		rune := rune(sequence[i])
		numbers[i] = int(rune) - '0'
	}

	return numbers
}

const input = "3674367652242621474168763928218321697812856559411236481728359862138483975662842414677931192831" +
	"83835972359686446876651595915734132336167171121577524691918457577129283476247264385162111539468922414495" +
	"23148419426259291788938621886334734497823163281389389853675932246734153563861233894952657625868415432316" +
	"15548724281379842577974356198756373494496284686526372271276867483824444438576856848984298987816365577184" +
	"73626561533722659454641286684124392489669393987654461718551445442854635172587498137313143659473725488114" +
	"34646381595273172982466142248474238762554858654679415418693478512641864168398722199638775667744977941183" +
	"77249453868539886234416452144611592552853449178872844866845534958897244329539138538955178328941734982338" +
	"33247484116891982193299966667522518155625227593745426529691476964196699145345867324369127985196977225867" +
	"95746371697338416716842214313393228587413399534716394984183943123375517819622837972796431166264646432893" +
	"47855765938779557323488914189731315845763714223831532787749399493351411264558635112713942928167591236666" +
	"94759317119743322713682874139856823749431958864559278395739864645551416792919986459366836391625883759745" +
	"49467767623463935561847869527383395278248952314792112113126231246742753119748113828843917812547224498319" +
	"84994751774562584481917597398684363662841496566446658217241919722769536849243335319923355887231952962682" +
	"57882881762755465664748242573368639775743473284691533194288837486963995449741333925898233437738973131733" +
	"36568883385364166336362398636684459886283964242249228938383219255513996468586953519638111599935229115228" +
	"83755924275292594365362368298557632392941544544337818947278245495823234198662679118286164411297441823928" +
	"64867226544421448511735387568596472187681345728583318495432661696727452213916593636749214694811436869524" +
	"78771714585793322926824623482923579986434741714167134346384551362664177865452895348948953472328966995731" +
	"16967257355562193958487218799932532232789333673661192975261324193521166424896152768777837197125965454123" +
	"9471766714469122213793348414477789271187324629397292446879752673"
