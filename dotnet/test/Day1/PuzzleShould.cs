using System.Linq;
using Shouldly;
using Xunit;

namespace AdventOfCode.Day1
{
    public class PuzzleShould
    {
        [Theory]
        [InlineData("1122", 3)]
        [InlineData("1111", 4)]
        [InlineData("1234", 0)]
        [InlineData("91212129", 9)]
        [InlineData(Input, 1069)]
        public void SolvePart1(string sequence, int expected)
        {
            // Act
            var actual = Puzzle.SolvePart1(ToNumberArray(sequence));

            // Assert
            actual.ShouldBe(expected);
        }

        [Theory]
        [InlineData("1212", 6)]
        [InlineData("1221", 0)]
        [InlineData("123425", 4)]
        [InlineData("123123", 12)]
        [InlineData("12131415", 4)]
        [InlineData(Input, 1268)]
        public void SolvePart2(string sequence, int expected)
        {
            // Act
            var actual = Puzzle.SolvePart2(ToNumberArray(sequence));

            // Assert
            actual.ShouldBe(expected);
        }

        private static int[] ToNumberArray(string sequence) =>
            sequence
                .ToCharArray()
                .Select(digit => int.Parse(digit.ToString()))
                .ToArray();

        private const string Input =
            "36743676522426214741687639282183216978128565594112364817283598621384839756628424146779311928318383597235" +
            "96864468766515959157341323361671711215775246919184575771292834762472643851621115394689224144952314841942" +
            "62592917889386218863347344978231632813893898536759322467341535638612338949526576258684154323161554872428" +
            "13798425779743561987563734944962846865263722712768674838244444385768568489842989878163655771847362656153" +
            "37226594546412866841243924896693939876544617185514454428546351725874981373131436594737254881143464638159" +
            "52731729824661422484742387625548586546794154186934785126418641683987221996387756677449779411837724945386" +
            "85398862344164521446115925528534491788728448668455349588972443295391385389551783289417349823383324748411" +
            "68919821932999666675225181556252275937454265296914769641966991453458673243691279851969772258679574637169" +
            "73384167168422143133932285874133995347163949841839431233755178196228379727964311662646464328934785576593" +
            "87795573234889141897313158457637142238315327877493994933514112645586351127139429281675912366669475931711" +
            "97433227136828741398568237494319588645592783957398646455514167929199864593668363916258837597454946776762" +
            "34639355618478695273833952782489523147921121131262312467427531197481138288439178125472244983198499475177" +
            "45625844819175973986843636628414965664466582172419197227695368492433353199233558872319529626825788288176" +
            "27554656647482425733686397757434732846915331942888374869639954497413339258982334377389731317333656888338" +
            "53641663363623986366844598862839642422492289383832192555139964685869535196381115999352291152288375592427" +
            "52925943653623682985576323929415445443378189472782454958232341986626791182861644112974418239286486722654" +
            "44214485117353875685964721876813457285833184954326616967274522139165936367492146948114368695247877171458" +
            "57933229268246234829235799864347417141671343463845513626641778654528953489489534723289669957311696725735" +
            "55621939584872187999325322327893336736611929752613241935211664248961527687778371971259654541239471766714" +
            "469122213793348414477789271187324629397292446879752673";
    }
}
